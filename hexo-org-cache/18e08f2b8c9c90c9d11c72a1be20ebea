{"md5":"04f53514cf600616c4f33770f08f9526","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\">Android 设计与实现 学习笔记</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<!-- more -->\n</div>\n<div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\">JNI</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n</div><div id=\"outline-container-sec-1-1-1\" class=\"outline-4\">\n<h4 id=\"sec-1-1-1\">JNI方法全名规则</h4>\n<div class=\"outline-text-4\" id=\"text-1-1-1\">\n<p>\njava方法：public static native boolean isLoggable(String tag, int level)\nJNI方法：static jboolean android<sub>util</sub><sub>Log</sub><sub>isLoggable</sub>(JNIEnv* env, jobject clazz, jstring tag, jint level)\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-1-2\" class=\"outline-4\">\n<h4 id=\"sec-1-1-2\">JNI引用类型与JAVA引用类型的转化关系</h4>\n<div class=\"outline-text-4\" id=\"text-1-1-2\">\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"left\">\n\n<col class=\"left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"left\">Java类型</th>\n<th scope=\"col\" class=\"left\">JNI类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"left\">java.lang.Class</td>\n<td class=\"left\">jclass</td>\n</tr>\n\n<tr>\n<td class=\"left\">java.lang.String</td>\n<td class=\"left\">jstring</td>\n</tr>\n\n<tr>\n<td class=\"left\">java.lang.Throwable</td>\n<td class=\"left\">jthrowable</td>\n</tr>\n\n<tr>\n<td class=\"left\">object[]</td>\n<td class=\"left\">jobjectArray</td>\n</tr>\n\n<tr>\n<td class=\"left\">boolean[]</td>\n<td class=\"left\">jbooleanArray</td>\n</tr>\n\n<tr>\n<td class=\"left\">byte[]</td>\n<td class=\"left\">jbyteArray</td>\n</tr>\n\n<tr>\n<td class=\"left\">char[]</td>\n<td class=\"left\">jcharArray</td>\n</tr>\n\n<tr>\n<td class=\"left\">short[]</td>\n<td class=\"left\">jshortArray</td>\n</tr>\n\n<tr>\n<td class=\"left\">int[]</td>\n<td class=\"left\">jintArray</td>\n</tr>\n\n<tr>\n<td class=\"left\">long[]</td>\n<td class=\"left\">jlongArray</td>\n</tr>\n\n<tr>\n<td class=\"left\">float[]</td>\n<td class=\"left\">jfloatArray</td>\n</tr>\n\n<tr>\n<td class=\"left\">double[]</td>\n<td class=\"left\">jdoubleArray</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-1-3\" class=\"outline-4\">\n<h4 id=\"sec-1-1-3\">JNI方法签名规则</h4>\n<div class=\"outline-text-4\" id=\"text-1-1-3\">\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"left\">\n\n<col class=\"left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"left\">Java类型</th>\n<th scope=\"col\" class=\"left\">类型签名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"left\">boolean</td>\n<td class=\"left\">Z</td>\n</tr>\n\n<tr>\n<td class=\"left\">byte</td>\n<td class=\"left\">B</td>\n</tr>\n\n<tr>\n<td class=\"left\">chat</td>\n<td class=\"left\">C</td>\n</tr>\n\n<tr>\n<td class=\"left\">long</td>\n<td class=\"left\">J</td>\n</tr>\n\n<tr>\n<td class=\"left\">float</td>\n<td class=\"left\">F</td>\n</tr>\n\n<tr>\n<td class=\"left\">double</td>\n<td class=\"left\">D</td>\n</tr>\n\n<tr>\n<td class=\"left\">short</td>\n<td class=\"left\">S</td>\n</tr>\n\n<tr>\n<td class=\"left\">int</td>\n<td class=\"left\">I</td>\n</tr>\n\n<tr>\n<td class=\"left\">类</td>\n<td class=\"left\">L全限定类名;</td>\n</tr>\n\n<tr>\n<td class=\"left\">数组</td>\n<td class=\"left\">[元素类型签名</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-1-4\" class=\"outline-4\">\n<h4 id=\"sec-1-1-4\">JNI操作域与方法的函数</h4>\n<div class=\"outline-text-4\" id=\"text-1-1-4\">\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"left\">\n\n<col class=\"left\">\n\n<col class=\"left\">\n\n<col class=\"left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"left\">访问对象域</th>\n<th scope=\"col\" class=\"left\">调用实例方法</th>\n<th scope=\"col\" class=\"left\">访问静态域</th>\n<th scope=\"col\" class=\"left\">调用静态方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"left\">GetFieldID</td>\n<td class=\"left\">GetMethodID</td>\n<td class=\"left\">GetStaticFieldID</td>\n<td class=\"left\">GetStaticMethodID</td>\n</tr>\n\n<tr>\n<td class=\"left\">Get&lt;Type&gt;Field</td>\n<td class=\"left\">Call&lt;Type&gt;Method</td>\n<td class=\"left\">GetStatic&lt;Type&gt;Field</td>\n<td class=\"left\">CallStatic&lt;Type&gt;Method</td>\n</tr>\n\n<tr>\n<td class=\"left\">Set&lt;Type&gt;Field</td>\n<td class=\"left\">CallNonvirtual&lt;Type&gt;Method</td>\n<td class=\"left\">SetStatic&lt;Type&gt;Field</td>\n<td class=\"left\">&#xa0;</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-1-5\" class=\"outline-4\">\n<h4 id=\"sec-1-1-5\">JNI引用</h4>\n<div class=\"outline-text-4\" id=\"text-1-1-5\">\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"left\">\n\n<col class=\"left\">\n\n<col class=\"left\">\n\n<col class=\"left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"left\">引用类型</th>\n<th scope=\"col\" class=\"left\">是否增加引用计数</th>\n<th scope=\"col\" class=\"left\">作用范围</th>\n<th scope=\"col\" class=\"left\">生命周期</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"left\">局部引用</td>\n<td class=\"left\">可以增加引用计数</td>\n<td class=\"left\">本线程</td>\n<td class=\"left\">一次Native调用，只在创建它的Native方法的线程中有效，并且只在Native方法的一次调用中有效，在方法返回后，被回收</td>\n</tr>\n\n<tr>\n<td class=\"left\">全局引用</td>\n<td class=\"left\">可以增加引用计数</td>\n<td class=\"left\">多线程</td>\n<td class=\"left\">多个Native方法，生命周期到显式释放。通过引用JNI函数NewGlobalRef创建，通过DeleteGlobalRef释放</td>\n</tr>\n\n<tr>\n<td class=\"left\">弱全局引用</td>\n<td class=\"left\">不能增加引用计数</td>\n<td class=\"left\">多线程</td>\n<td class=\"left\">生命周期到显式释放。通过NewWeakGlobalRef创建，通过DeleteWeakGlobalRef释放，通过IsSameObject判断是否被回收</td>\n</tr>\n</tbody>\n</table>\n\n<p>\nif (env-&gt;isSameObject(weak<sub>ref</sub>, NULL) == JNI<sub>TRUE</sub>) 那么引用被释放\n</p>\n\n<p>\n*全局引用，默认不能超过2000个。如果超过，在logcat中会看到\"GREF overflow\"*\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-1-6\" class=\"outline-4\">\n<h4 id=\"sec-1-1-6\">JNI异常处理</h4>\n<div class=\"outline-text-4\" id=\"text-1-1-6\">\n<p>\n检查异常的方法有：\n</p>\n<ul class=\"org-ul\">\n<li>检查上一次JNI函数调用的返回值是否为NULL\n</li>\n<li>通过调用JNI函数ExceptionOccurred()来判断是否发生异常\n</li>\n</ul>\n\n<p>\n检查到异常后必须予以处理：\n</p>\n<ul class=\"org-ul\">\n<li>立即返回，异常会在Java代码中抛出\n</li>\n<li>调用ExceptionClear()来清除异常\n</li>\n</ul>\n\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"left\">\n\n<col class=\"left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"left\">JNI异常处理函数</th>\n<th scope=\"col\" class=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"left\">Throw</td>\n<td class=\"left\">抛出现有异常</td>\n</tr>\n\n<tr>\n<td class=\"left\">ThrowNew</td>\n<td class=\"left\">抛出新的异常</td>\n</tr>\n\n<tr>\n<td class=\"left\">ExceptionOccurred</td>\n<td class=\"left\">判断是否发生异常，并获得异常的引用</td>\n</tr>\n\n<tr>\n<td class=\"left\">ExceptionCheck</td>\n<td class=\"left\">判断是否发生异常</td>\n</tr>\n\n<tr>\n<td class=\"left\">ExceptionDescribe</td>\n<td class=\"left\">异常堆栈信息</td>\n</tr>\n\n<tr>\n<td class=\"left\">ExceptionClear</td>\n<td class=\"left\">清除一个未处理的异常</td>\n</tr>\n\n<tr>\n<td class=\"left\">FatalError</td>\n<td class=\"left\">严重错误，退出</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n\n\n<div id=\"outline-container-sec-1-2\" class=\"outline-3\">\n<h3 id=\"sec-1-2\">启动</h3>\n<div class=\"outline-text-3\" id=\"text-1-2\">\n</div><div id=\"outline-container-sec-1-2-1\" class=\"outline-4\">\n<h4 id=\"sec-1-2-1\">启动流程</h4>\n<div class=\"outline-text-4\" id=\"text-1-2-1\">\n<ol class=\"org-ol\">\n<li>执行bootloader\n</li>\n<li>调用start<sub>kernel进入内核启动阶段，最终启动用户空间的init程序</sub>\n</li>\n<li>init解析init.rc配置文件，开启zygote与ServiceManager两个守护进程。zygote为Android启动的第一个Dalvik虚拟机，ServiceManager是Binder通信的基础。\n</li>\n<li>zygote定义socket，用于接收ActivityManagerService启动应用程序的请求\n</li>\n<li>zygote虚拟机启动system<sub>server子进程。</sub>\n</li>\n<li>system<sub>server进程的init1与init2阶段分别启动Native</sub> System Service和Java System Service\n</li>\n<li>在system<sub>server中开启Android核心服务，并添加入ServiceManager中。设置系统为systemReady状态。</sub>\n</li>\n<li>ActivityManagerService与zygote中的Socket通信，通过zygote启动Home应用，进入系统桌面。\n</li>\n<li>zygote收到ActivityManagerService连接请求，执行runSelectLoopMode\n</li>\n<li>zygote处理请求通过forkAndSpecialize启动新的应用进程，并最终启动HOME\n</li>\n</ol>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-2-2\" class=\"outline-4\">\n<h4 id=\"sec-1-2-2\">内核引导阶段</h4>\n<div class=\"outline-text-4\" id=\"text-1-2-2\">\n<ul class=\"org-ul\">\n<li>kernel/arch/arm/kernel/head.S\n</li>\n<li>kernel/arch/arm/kernel/head-common.S\n</li>\n</ul>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-2-3\" class=\"outline-4\">\n<h4 id=\"sec-1-2-3\">内核启动阶段</h4>\n<div class=\"outline-text-4\" id=\"text-1-2-3\">\n<ol class=\"org-ol\">\n<li>kernel/init/main.c -&gt; start<sub>kernel函数</sub>\n</li>\n<li>rest<sub>init</sub> -&gt; kernel<sub>init与kthreadd进程</sub>\n   kernel<sub>init</sub> -&gt; init<sub>post</sub> -&gt; /init 程序，或：/sbin/init, /etc/init, /bin/init, /bin/sh -&gt; run<sub>init</sub><sub>process</sub>\n</li>\n</ol>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-2-4\" class=\"outline-4\">\n<h4 id=\"sec-1-2-4\">init进程执行过程</h4>\n<div class=\"outline-text-4\" id=\"text-1-2-4\">\n<ul class=\"org-ul\">\n<li>创建 /proc, /sys, tmpfs, /dev/pts, /dev/socket, devpts, proc, sysfs 这些目录\n</li>\n<li>解析init.rc初始化文件\n</li>\n<li>触发build in的Action -&gt; queue<sub>builtin</sub><sub>action</sub>, 这些action并没有在init.rc或者init.&lt;hardware&gt;.rc中配置\n</li>\n<li>重新启动异常退出的Service\n</li>\n<li>监听来自属性服务property service\n</li>\n<li>监控signal，接收子进程异常退出后抛出的SIGCHLD信号，回收子进程资源或者重启子进程\n</li>\n<li>监听来自keychord设备的事件\n</li>\n</ul>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-2-5\" class=\"outline-4\">\n<h4 id=\"sec-1-2-5\">init.rc文件</h4>\n<div class=\"outline-text-4\" id=\"text-1-2-5\">\n<ul class=\"org-ul\">\n<li>基本概念：Section, Action, Service, Trigger, Command, Option\n</li>\n<li>基本关键字：on, service\n</li>\n<li>on -&gt; Action\n</li>\n<li>service -&gt; Service，Option指定何时，如何启动Service程序。Service由服务名，服务对应命令路径，命令参数组成\n</li>\n<li>Command -&gt; Linux命令或者方法\n</li>\n<li>Trigger -&gt; 自定义的触发条件\n</li>\n<li>Action -&gt; on声明，Trigger触发的Command序列\n</li>\n</ul>\n\n\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"left\">\n\n<col class=\"left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"left\">Trigger关键字</th>\n<th scope=\"col\" class=\"left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"left\">boot</td>\n<td class=\"left\">/init.conf被加载后的第一个trigger</td>\n</tr>\n\n<tr>\n<td class=\"left\">property:&lt;property name&gt;=&lt;property value&gt;</td>\n<td class=\"left\">属性值改变为指定值时</td>\n</tr>\n\n<tr>\n<td class=\"left\">device-added-&lt;path&gt;</td>\n<td class=\"left\">添加设备时触发</td>\n</tr>\n\n<tr>\n<td class=\"left\">device-removed-&lt;path&gt;</td>\n<td class=\"left\">移除设备时触发</td>\n</tr>\n\n<tr>\n<td class=\"left\">service-exited-&lt;name&gt;</td>\n<td class=\"left\">指定服务存在时</td>\n</tr>\n</tbody>\n</table>\n\n\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"left\">\n\n<col class=\"left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"left\">Command关键字</th>\n<th scope=\"col\" class=\"left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"left\">exec &lt;path&gt; [&lt;argument&gt;*]</td>\n<td class=\"left\">执行路径为&lt;path&gt;的程序，参数列表为&lt;argument&gt;*</td>\n</tr>\n\n<tr>\n<td class=\"left\">export &lt;name&gt; &lt;value&gt;</td>\n<td class=\"left\">设置系统全局环境变量</td>\n</tr>\n\n<tr>\n<td class=\"left\">ifup &lt;interface&gt;</td>\n<td class=\"left\">使用ifup启动名为&lt;interface&gt;的网络接口</td>\n</tr>\n\n<tr>\n<td class=\"left\">import &lt;filename&gt;</td>\n<td class=\"left\">解析导入的init配置文件，扩展当前的配置</td>\n</tr>\n\n<tr>\n<td class=\"left\">hostname &lt;name&gt;</td>\n<td class=\"left\">设置主机名</td>\n</tr>\n\n<tr>\n<td class=\"left\">chdir &lt;directory&gt;</td>\n<td class=\"left\">切换工作目录</td>\n</tr>\n\n<tr>\n<td class=\"left\">chmod &lt;octal-mode&gt; &lt;path&gt;</td>\n<td class=\"left\">修改文件访问权限</td>\n</tr>\n\n<tr>\n<td class=\"left\">chown &lt;owner&gt; &lt;group&gt; &lt;path&gt;</td>\n<td class=\"left\">修改文件所有者和组</td>\n</tr>\n\n<tr>\n<td class=\"left\">chroot &lt;directory&gt;</td>\n<td class=\"left\">改变程序执行所参考的根目录</td>\n</tr>\n\n<tr>\n<td class=\"left\">class<sub>start</sub> &lt;serviceclass&gt;</td>\n<td class=\"left\">启动指定类别的所有服务</td>\n</tr>\n\n<tr>\n<td class=\"left\">class<sub>stop</sub> &lt;serviceclass&gt;</td>\n<td class=\"left\">停止指定类别的所有服务</td>\n</tr>\n\n<tr>\n<td class=\"left\">domainname &lt;name&gt;</td>\n<td class=\"left\">设置域名</td>\n</tr>\n\n<tr>\n<td class=\"left\">insmod &lt;path&gt;</td>\n<td class=\"left\">加载路径为&lt;path&gt;的内核模块</td>\n</tr>\n\n<tr>\n<td class=\"left\">mkdir &lt;path&gt; [mode] [owner] [group]</td>\n<td class=\"left\">创建路径为&lt;path&gt;的目录</td>\n</tr>\n\n<tr>\n<td class=\"left\">mount &lt;type&gt; &lt;device&gt; &lt;dir&gt; [&lt;mountoption&gt;*]</td>\n<td class=\"left\">挂载设备</td>\n</tr>\n\n<tr>\n<td class=\"left\">setkey</td>\n<td class=\"left\">暂时不可用</td>\n</tr>\n\n<tr>\n<td class=\"left\">setprop &lt;name&gt; &lt;value&gt;</td>\n<td class=\"left\">设置系统属性</td>\n</tr>\n\n<tr>\n<td class=\"left\">setrlimit &lt;resource&gt; &lt;cur&gt; &lt;max&gt;</td>\n<td class=\"left\">设置资源限制，resource是当前要限制的资源，cur是软限制，max是硬限制</td>\n</tr>\n\n<tr>\n<td class=\"left\">start &lt;service&gt;</td>\n<td class=\"left\">启动指定服务</td>\n</tr>\n\n<tr>\n<td class=\"left\">stop &lt;service&gt;</td>\n<td class=\"left\">停止指定服务</td>\n</tr>\n\n<tr>\n<td class=\"left\">symlink &lt;target&gt; &lt;path&gt;</td>\n<td class=\"left\">创建指向&lt;path&gt;的软连接&lt;target&gt;</td>\n</tr>\n\n<tr>\n<td class=\"left\">sysclktz &lt;mins<sub>west</sub><sub>of</sub><sub>gmt</sub>&gt;</td>\n<td class=\"left\">设置系统时钟基准</td>\n</tr>\n\n<tr>\n<td class=\"left\">trigger &lt;event&gt;</td>\n<td class=\"left\">触发一个事件</td>\n</tr>\n\n<tr>\n<td class=\"left\">write &lt;path&gt; &lt;string&gt; [&lt;string&gt;*]</td>\n<td class=\"left\">打开路径为&lt;path&gt;的一个文件，并写入一个或多个字符串</td>\n</tr>\n</tbody>\n</table>\n\n\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"left\">\n\n<col class=\"left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"left\">Option关键字</th>\n<th scope=\"col\" class=\"left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"left\">critial</td>\n<td class=\"left\">核心服务，在一定时间内退出多次，将导致系统重启到recovery mode</td>\n</tr>\n\n<tr>\n<td class=\"left\">disabled</td>\n<td class=\"left\">开机时禁用此服务，即开机时不会自动启动此服务，但是可以手动启动</td>\n</tr>\n\n<tr>\n<td class=\"left\">setenv &lt;name&gt; &lt;value&gt;</td>\n<td class=\"left\">为服务设置环境变量</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"left\">socket &lt;name&gt; &lt;type&gt; &lt;perm&gt; [&lt;user&gt; [&lt;group&gt;]]</td>\n<td class=\"left\">创建一个名为/dev/socket/&lt;name&gt;的socket，然后把它的文件描述符传给启动程序。</td>\n</tr>\n\n<tr>\n<td class=\"left\">&#xa0;</td>\n<td class=\"left\">类型type的值为dgram或stream。perm表示该socket的访问权限；</td>\n</tr>\n\n<tr>\n<td class=\"left\">&#xa0;</td>\n<td class=\"left\">user和group表示该socket所属的用户各组，这两个参数默认为0</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"left\">user &lt;username&gt;</td>\n<td class=\"left\">执行服务前切换到用户&lt;username&gt;，此选项默认是root</td>\n</tr>\n\n<tr>\n<td class=\"left\">group &lt;groupname&gt; [&lt;groupname&gt;*]</td>\n<td class=\"left\">执行服务前切换到组&lt;groupname&gt;, 默认是root</td>\n</tr>\n\n<tr>\n<td class=\"left\">oneshot</td>\n<td class=\"left\">服务只启动一次，一旦关闭就不能再启动</td>\n</tr>\n\n<tr>\n<td class=\"left\">class &lt;name&gt;</td>\n<td class=\"left\">为服务指定一个类别，默认为default, 同一类别的服务必须一起启动和停止</td>\n</tr>\n\n<tr>\n<td class=\"left\">onrestart &lt;Command&gt;</td>\n<td class=\"left\">当服务重启时，执行一个Command</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-2-6\" class=\"outline-4\">\n<h4 id=\"sec-1-2-6\">执行Action，Service与属性服务</h4>\n<div class=\"outline-text-4\" id=\"text-1-2-6\">\n<ul class=\"org-ul\">\n<li>init.c中的execute<sub>one</sub><sub>command</sub>, service<sub>start</sub>\n</li>\n\n<li>init.c -&gt; main -&gt; action<sub>for</sub><sub>each</sub><sub>trigger</sub> -&gt; builtins.c中的do<sub>class</sub><sub>start</sub> -&gt; service<sub>start</sub><sub>if</sub><sub>not</sub><sub>disabled</sub>\n</li>\n\n<li>init.c -&gt; main -&gt; property<sub>init</sub>() 属性服务内存共享区分配 -&gt; property<sub>load</sub><sub>boot</sub><sub>defaults加载</sub>/default.prop文件中的属性 -&gt; property<sub>service</sub><sub>init</sub> -&gt; queue<sub>property</sub><sub>triggers</sub>\n<ol class=\"org-ol\">\n<li>property<sub>service</sub><sub>init</sub><sub>action</sub> -&gt; start<sub>property</sub><sub>service</sub> 加载属性文件，创建Socket接收客户端请求\n</li>\n<li>queue<sub>property</sub><sub>triggers</sub><sub>action</sub> 触发所有以property: 开头的Action\n</li>\n<li>通过SOCKET实现属性，通讯接口为property<sub>set</sub>, property<sub>get</sub>\n</li>\n</ol>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-1-2-7\" class=\"outline-4\">\n<h4 id=\"sec-1-2-7\">进入Java世界</h4>\n<div class=\"outline-text-4\" id=\"text-1-2-7\">\n</div><ul class=\"org-ul\"><li><a id=\"sec-1-2-7-1\" name=\"sec-1-2-7-1\"></a>启动zygote虚拟机，通过属性系统获取虚拟机配置信息，调用JNI<sub>CreateJavaVM方法创建虚拟机</sub><br></li>\n<li><a id=\"sec-1-2-7-2\" name=\"sec-1-2-7-2\"></a>注册JNI方法，register<sub>jni</sub><sub>procs</sub><br></li>\n<li><a id=\"sec-1-2-7-3\" name=\"sec-1-2-7-3\"></a>AndroidRuntime：start -&gt; CallStaticVoidMethod -&gt; ZygoteInit的main 进入Java环境<br><div class=\"outline-text-5\" id=\"text-1-2-7-3\">\n<ol class=\"org-ol\">\n<li>注册zygote的Socket, ZygoteInit -&gt; registerZygoteSocket\n</li>\n<li>预加载Class资源和Resource资源, preload -&gt; preLoadClass, preLoadResources\n<ol class=\"org-ol\">\n<li>preLoadClass 加载 preloaded-classes 文件中指定的类\n</li>\n<li>preLoadResources 加载 drawable与color资源，定义在framework/base/core/res/res/values/arrays.xml\n</li>\n</ol>\n</li>\n<li>ZygoteInit -&gt; startSystemServer 启动system<sub>serve进程</sub>\n<ol class=\"org-ol\">\n<li>通过forkSystemServer -&gt; system<sub>server子进程</sub>\n</li>\n<li>system<sub>server子进程</sub> -&gt; handleSystemServerProcess -&gt; RuntimeInit.zygoteInit\n<ol class=\"org-ol\">\n<li>redirectLogStream\n</li>\n<li>commonInit 设置时区，Log配置，HTTP User-Agent，模拟器上的trace调试\n</li>\n<li>nativeZygoteInit 开启Binder通信\n</li>\n<li>invodeStaticMain -&gt; com.android.server.SystemServer.main -&gt; throw new ZygoteInit.MethodAndArgsCaller\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>ZygoteInit.main -&gt; catch(ZygoteInit.MethodAndArgsCaller) -&gt; 执行MethodAndArgsCaller的run方法\n<ol class=\"org-ol\">\n<li>init1 -&gt; 启动Native System Service\n<ul class=\"org-ul\">\n<li>SurfaceFlinger, SensorService\n</li>\n<li>AndroidRuntime -&gt; SystemServer.init2\n</li>\n<li>初始化Binder通信\n</li>\n</ul>\n</li>\n<li>init2 -&gt; Java System Service\n<ul class=\"org-ul\">\n<li>Looper.prepare()\n</li>\n<li>EntropyService, PowerManagerService, ActivityManagerService, TelephonyRegistry, PackageManagerService, WindowManagerService\n</li>\n<li>startSystemUi\n</li>\n<li>Watchdog\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>执行runSelectLoopMode方法，通过Socket监听客户端请求。用runOnce处理请求\n</li>\n</ol>\n</div>\n</li>\n<li><a id=\"sec-1-2-7-4\" name=\"sec-1-2-7-4\"></a>处理Home启动请求<br><div class=\"outline-text-5\" id=\"text-1-2-7-4\">\n<p>\nActivityManagerService.systemReady -&gt; ActivityStack.resumeTopActivityLocked -&gt; ActivityManagerService.startHomeActivityLocked -&gt; ActivityStack.startActivityLocked -&gt; ActivityStack.startActivityUncheckedLocked -&gt; other startActivityLocked -&gt; other resumeTopActivityLocked -&gt; startSpecificActivityLocked -&gt; startProcessLocked -&gt; Process.start(\"android.app.ActivityThread\") -&gt; startViaZygote -&gt; zygoteSendArgsAndGetResult -&gt; Socket -&gt; zygote -&gt; runOnce -&gt; handleChildProc -&gt; android.app.ActivityThread.main\n</p>\n</div>\n</li></ul>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-3\" class=\"outline-3\">\n<h3 id=\"sec-1-3\">Binder</h3>\n<div class=\"outline-text-3\" id=\"text-1-3\">\n</div><ul class=\"org-ul\"><li><a id=\"sec-1-3-0-1\" name=\"sec-1-3-0-1\"></a>初始化Binder通信<br></li>\n<li><a id=\"sec-1-3-0-2\" name=\"sec-1-3-0-2\"></a>将自身注册为Context管理者<br></li>\n<li><a id=\"sec-1-3-0-3\" name=\"sec-1-3-0-3\"></a>循环处理IPC请求<br></li>\n\n<li><a id=\"sec-1-3-0-4\" name=\"sec-1-3-0-4\"></a>Server启动<br><div class=\"outline-text-5\" id=\"text-1-3-0-4\">\n<ol class=\"org-ol\">\n<li>创建ProcessState对象\n</li>\n<li>获取servicemanager代理对象\n<ul class=\"org-ul\">\n<li>Binder通信接口: IBinder, BBinder（Server对应的Binder对象）, BpBinder（Client访问BBinder的代理对象）\n</li>\n<li>Binder服务接口：Server端提供的服务，由IServiceManager提供\n</li>\n<li>Proxy：BpInterface继承自BpRefBase，BpRefBase.mRemote指向Client的BpBinder对象。BpServiceManager实现服务接口中声明的方法\n</li>\n<li>Stub：BnInterface，BnServerManager\n</li>\n</ul>\n</li>\n<li>注册Service\n</li>\n<li>Server进程开启线程池\n</li>\n</ol>\n</div>\n</li>\n\n<li><a id=\"sec-1-3-0-5\" name=\"sec-1-3-0-5\"></a>Binder在Native中的实现<br></li>\n<li><a id=\"sec-1-3-0-6\" name=\"sec-1-3-0-6\"></a>Binder在Java层中的实现<br></li>\n<li><a id=\"sec-1-3-0-7\" name=\"sec-1-3-0-7\"></a>Java系统服务注册过程<br><div class=\"outline-text-5\" id=\"text-1-3-0-7\">\n<p>\nBinderInternal.getContextObject -&gt; IBinder -&gt; ServiceManagerNative.asInteface -&gt; sServiceManager -&gt; addService\n</p>\n\n<ol class=\"org-ol\">\n<li>BinderInternal.getContextObject\n</li>\n<li>ServiceManagerNative.asInterface\n</li>\n<li>ServiceManagerProxy.addService\n<ol class=\"org-ol\">\n<li>Java的Service对象写入Parcel中\n</li>\n<li>使用transact方法进行ipc通信\n</li>\n</ol>\n</li>\n</ol>\n</div>\n</li>\n<li><a id=\"sec-1-3-0-8\" name=\"sec-1-3-0-8\"></a>Client获取服务代理<br><div class=\"outline-text-5\" id=\"text-1-3-0-8\">\n<ol class=\"org-ol\">\n<li>获取服务的Proxy\n</li>\n<li>Proxy.Stub.asInterface\n</li>\n<li>new SomeServer(SomeServerInterface, Thread)\n</li>\n</ol>\n</div>\n</li>\n<li><a id=\"sec-1-3-0-9\" name=\"sec-1-3-0-9\"></a>Client调用Java系统服务的方法<br></li>\n<li><a id=\"sec-1-3-0-10\" name=\"sec-1-3-0-10\"></a>AIDL<br></li></ul>\n</div>\n<div id=\"outline-container-sec-1-4\" class=\"outline-3\">\n<h3 id=\"sec-1-4\">消息通信篇</h3>\n<div class=\"outline-text-3\" id=\"text-1-4\">\n<ol class=\"org-ol\">\n<li>Handler.post(Runnable r) -&gt; Handler.sendMessageDelayed(getPostMessage(r), 0) -&gt; Message m.callback = r\n</li>\n<li>Handler.dispatchMessage -&gt; msg.callback != null -&gt; callback\n-&gt; msg.handleMessage != null -&gt; callback.handleMessage\n-&gt; handleMessage\n</li>\n<li>MessageQueue.IdleHandler\n</li>\n<li>Message.recycle\n</li>\n<li>AsyncTask.execute -&gt; executeOnExecutor(SerialExecutor, params) -&gt; SerialExecutor.execute(mFuture)\n<ul class=\"org-ul\">\n<li>会通过一个ThreadPoolExecutor来执行线程\n</li>\n</ul>\n</li>\n</ol>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-5\" class=\"outline-3\">\n<h3 id=\"sec-1-5\">Package Manager</h3>\n<div class=\"outline-text-3\" id=\"text-1-5\">\n<ul class=\"org-ul\">\n<li>Permission, Permission Group信息的增加，删除，查询和检查\n</li>\n<li>扫描并安装和卸载APK包，查询包的UID，GID，包名，系统默认程序\n</li>\n<li>比较两个包的签名\n</li>\n<li>查询Activity，Provider、Receiver、Service信息\n</li>\n<li>查询Application、Package、Resouce、Shared、Library、Feature信息\n</li>\n<li>Intent匹配\n</li>\n</ul>\n</div>\n\n<div id=\"outline-container-sec-1-5-1\" class=\"outline-4\">\n<h4 id=\"sec-1-5-1\">结构</h4>\n<div class=\"outline-text-4\" id=\"text-1-5-1\">\n<ul class=\"org-ul\">\n<li>adb push -&gt; adb install -r -l -s -&gt; adb uninstall\n</li>\n\n<li>Google Market、PackageInstaller.apk、第三方安装界面\n</li>\n\n<li>PackageManager及其子类、adb与pm命令 -&gt; binder通信 -&gt; PackageManagerService方法\n</li>\n\n<li>PackageManagerService及其相关类 Setting、Installer、FileObserver、DefaultContainerService\n</li>\n</ul>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-5-2\" class=\"outline-4\">\n<h4 id=\"sec-1-5-2\">启动</h4>\n<div class=\"outline-text-4\" id=\"text-1-5-2\">\n<ol class=\"org-ol\">\n<li>SystemServer.Init2() -&gt; ServerThread.run() -&gt; PackageManagerService.main()\n</li>\n<li>PackageManagerService pms = new PackageManagerService(context, factoryTest, onlyCore)\n</li>\n<li>创建并初始化Setting对象\n</li>\n<li>获取系统默认设置\n</li>\n<li>启动PackageHandler\n</li>\n<li>创建data目录并初始化UserManager\n</li>\n<li>解析data/system目录下的package.xml、packages-backup.xml\n</li>\n<li>dexopt优化\n</li>\n<li>启动FileObserver监控APK文件的目录\n</li>\n<li>调用scanDirLI扫描并安装APK\n</li>\n<li>writeLPr更新package.xml, packages-backup.xml\n</li>\n</ol>\n\n<p>\nuid &gt;= FIRST<sub>APPLICATION</sub><sub>UID</sub> 或者 uid &lt; FIRST<sub>APPLICATION</sub><sub>UID，FIST</sub><sub>APPLICATION</sub><sub>UID</sub> &lt; 10000为系统程序UID。\n</p>\n</div>\n\n<ul class=\"org-ul\"><li><a id=\"sec-1-5-2-1\" name=\"sec-1-5-2-1\"></a>&lt;permission&gt;<br><div class=\"outline-text-5\" id=\"text-1-5-2-1\">\n<ul class=\"org-ul\">\n<li>&lt;group&gt;用于为指定的组ID分配权限\n</li>\n<li>&lt;assign<sub>permission</sub>&gt;用于为指定的用户ID分配指定的权限\n</li>\n<li>&lt;library&gt;指定的系统扩展库\n</li>\n</ul>\n</div>\n</li>\n\n<li><a id=\"sec-1-5-2-2\" name=\"sec-1-5-2-2\"></a>&lt;feature&gt;<br><div class=\"outline-text-5\" id=\"text-1-5-2-2\">\n<ul class=\"org-ul\">\n<li>Hardware feature 指定当前设备支持的硬件特性：Audio、Bluetooth、Camera、Location、Microphone、NFC、Sensors、Screen、Telephony、Touchscreen、USB、WIFI。\n</li>\n<li>Software feature SIP VOIP\n</li>\n</ul>\n\n<p>\nPackageManager的hasSystemFeature, getSystemAvailableFeatures\n</p>\n</div>\n</li>\n\n<li><a id=\"sec-1-5-2-3\" name=\"sec-1-5-2-3\"></a>FileObserver监控<br><div class=\"outline-text-5\" id=\"text-1-5-2-3\">\n<ul class=\"org-ul\">\n<li>system/framework\n</li>\n<li>system/app\n</li>\n<li>vendor/app\n</li>\n<li>data/app\n</li>\n<li>data/app-private\n</li>\n</ul>\n</div>\n</li>\n\n<li><a id=\"sec-1-5-2-4\" name=\"sec-1-5-2-4\"></a>scanDirLI<br><div class=\"outline-text-5\" id=\"text-1-5-2-4\">\n<ul class=\"org-ul\">\n<li>system/framework/\n</li>\n<li>system/app/\n</li>\n<li>vendor/app/\n</li>\n<li>data/app\n</li>\n<li>data/app-private\n</li>\n</ul>\n</div>\n</li></ul>\n</div>\n\n<div id=\"outline-container-sec-1-5-3\" class=\"outline-4\">\n<h4 id=\"sec-1-5-3\">APK安装过程</h4>\n<div class=\"outline-text-4\" id=\"text-1-5-3\">\n<ul class=\"org-ul\">\n<li>读取目录\n</li>\n<li>解析AndroidManifest.xml\n</li>\n</ul>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-6\" class=\"outline-3\">\n<h3 id=\"sec-1-6\">Activity Manager</h3>\n<div class=\"outline-text-3\" id=\"text-1-6\">\n</div><div id=\"outline-container-sec-1-6-1\" class=\"outline-4\">\n<h4 id=\"sec-1-6-1\">机制与实现</h4>\n<div class=\"outline-text-4\" id=\"text-1-6-1\">\n<ul class=\"org-ul\">\n<li>启动、杀死应用程序\n</li>\n<li>启动并调度Activity生命周期\n</li>\n<li>启动并调度应用程序Service生命周期\n</li>\n<li>注册Broadcast Receiver，并接收和分发Broadcast\n</li>\n<li>启动并发布Content Provider\n</li>\n<li>调度Task\n</li>\n<li>检查、授予、收回访问URI权限\n</li>\n<li>处理crash\n</li>\n<li>调整进程调度优先级及策略\n</li>\n<li>查询当前系统运行状态\n</li>\n</ul>\n\n<p>\nActivityThread：管理应用程序所在进程的主线程的执行调度和运行Activities，broadcast\n</p>\n\n<p>\nInstrumentation：应用程序测量工具基类，用于监控系统与应用程序间的交互\n</p>\n\n<p>\nContextImpl：context的通用实现类\n</p>\n\n<p>\nContext2： 可以获取应用程序运行环境中的一些全局信息的接口\n</p>\n\n<p>\nApplication：一个可以维护全局的应用程序状态的基类\n</p>\n\n<ol class=\"org-ol\">\n<li>初始化一个单例的Context对象，使其与Resource、LoadApk、ActivityThread、ApplicationContentResolver关联\n</li>\n<li>创建Application对象，并与Context关联\n</li>\n<li>创建ActivityStack类，管理Activity栈并维护其状态\n</li>\n<li>startRunning\n</li>\n<li>ActivityManagerService.setSystemProcess\n</li>\n<li>installSystemProviders\n</li>\n<li>查询、安装Content Provider -&gt; publishContentProvider\n</li>\n<li>systemReady\n<ol class=\"org-ol\">\n<li>发送ACTION<sub>PRE</sub><sub>BOOT</sub><sub>COMPLETED广播：CalendarProvider、ContactsProvider、MediaProvider</sub>\n</li>\n<li>清理预启动的非persistent进程\n</li>\n<li>读取Settings配置： always<sub>finish</sub><sub>activities</sub>\n</li>\n<li>Runnable回调接口：SystemUIService、BatteryService、NetworkManagementService、Watchdog\n</li>\n<li>启动persistent应用和Home\n</li>\n<li>发送ACTION<sub>BOOT</sub><sub>COMPLETED广播</sub>\n</li>\n</ol>\n</li>\n</ol>\n</div>\n</div>\n\n\n<div id=\"outline-container-sec-1-6-2\" class=\"outline-4\">\n<h4 id=\"sec-1-6-2\">应用程序Activity的启动和调度</h4>\n<div class=\"outline-text-4\" id=\"text-1-6-2\">\n<p>\nLauncher.onClick -&gt; Launcher.startActivitySafely -&gt; Launcher.startActivity -&gt; Launch.parent.startActivity -&gt; Activity.startActivityForResult(requestCode = -1) -&gt; Instrumentation.execStartActivity -&gt; ActivityManagerProxy.startActivity -&gt; BinderProxy.transact(START<sub>ACTIVITY</sub><sub>TRANSACTION</sub>)\n</p>\n\n<p>\nActivityManagerService.startActivityMayWait -&gt; ActivityStack.startActivityLock -&gt; ActivityStack.startActivityUncheckedLocked -&gt; ActivityStack.startActivityLocked -&gt; ActivityStack.resumeTopActivity\n</p>\n\n<p>\nActivityManagerService.startActivityMayWait\n</p>\n\n<p>\nint index = indexOfTokenLocked -&gt; resultCode = mHistory.get(index) -&gt; sendActivityResultLocked\n</p>\n\n<p>\nFLAG<sub>ACTIVITY</sub><sub>NEW</sub><sub>TASK：</sub>\n</p>\n<ul class=\"org-ul\">\n<li>sourceRecord == null (由Launch或者adb start)\n</li>\n<li>sourceRecord 启动模式为singleInstance\n</li>\n<li>要启动的目标为singleInstance或者singleTask\n</li>\n</ul>\n\n<p>\n用户行为导致Activity切换 -&gt; 回调Activity.onUserLeaveHint\n</p>\n\n<p>\n可利用Task：\n</p>\n<ul class=\"org-ul\">\n<li>目标非singleInstance：\n<ol class=\"org-ol\">\n<li>ActivityRecord.affinity == Activity.affinity\n</li>\n<li>ActivityRecord.Task.Intent.Component == Activity.Component\n</li>\n<li>ActivityRecord.Task.affinityIntent.Component == Activity.Component\n</li>\n</ol>\n</li>\n<li>目标为singleInstance，ActivityRecord.Task.Intent.Component == Activity.Component\n</li>\n</ul>\n\n<p>\n启动Activity的第二个阶段为Pause\n</p>\n<ol class=\"org-ol\">\n<li>ActivityStack.startPausingLocked\n</li>\n<li>schedulePauseActivity\n</li>\n<li>handlePauseActivity\n</li>\n<li>performPauseActivity\n</li>\n<li>activityPaused\n</li>\n<li>completedPauseLocked\n</li>\n</ol>\n\n<p>\n启动应用程序进程\n</p>\n<ul class=\"org-ul\">\n<li>会根据新的Activity是否占满屏来决定前一个Activity是否可见\n</li>\n<li>如果systemReady 没有设为true，则先启动的应用程序都加入mProcessesOnHold列表中等待\n</li>\n</ul>\n\n<p>\n加载应用程序Activity\n</p>\n<ul class=\"org-ul\">\n<li>ActivityThread.main创建出程序主线程\n</li>\n<li>ActivityThread.attch将应用程序加入到ActivityManagerService中\n</li>\n<li>ActivityManagerService.attachApplication\n</li>\n<li>ApplicationThread.bindApplication\n</li>\n<li>ActivityThread.handleBindApplication\n<ol class=\"org-ol\">\n<li>设置进程名\n</li>\n<li>低内存设备禁用硬件加速\n</li>\n<li>创建应用程序对应的Application\n</li>\n<li>安装ContentProvider\n</li>\n<li>Instrumentation的onCreate方法\n</li>\n<li>Application的onCreate方法\n</li>\n</ol>\n</li>\n</ul>\n\n<p>\n显示Activity\n</p>\n<ol class=\"org-ol\">\n<li>ActivityStack.realStartActivityLocked：加载Activity，onCreate，onStart，onResume。会通过WindowManagerService冻结屏幕并设置Activity可见。\n</li>\n\n<li>handleLaunchActivity -&gt; performLaunchActivity -&gt; newActivity -&gt; makeApplication -&gt; init -&gt; attach -&gt; callActivityOnCreate -&gt; performCreate -&gt; onCreate -&gt; performStart -&gt; callActivityOnStart -&gt; onStart -&gt; callActivityOnPostCreate -&gt; onPostCreate\n</li>\n\n<li>handleResumeActivity -&gt; performResumeActivity -&gt; onResume 控制可见性，如果在onResume时，又启动另一个Activity则窗口变不可见，黑屏可能由此来。onResume之前可能会有onNewIntent与onActivityResult调用\n</li>\n\n<li>如果当前Activity处于stop状态，onRestart -&gt; onStart -&gt; onResume -》onPostResme\n</li>\n\n<li>Activity.finish只是标志一下Activity处于完成的状态，会在IdleHandle线程中销毁\n</li>\n</ol>\n\n<p>\n停止源Activity，在目标Activity的onCreate、onStart、onResume、activityIdleInternal执行后，开始停止源Activity。\n</p>\n<ol class=\"org-ol\">\n<li>FLAG<sub>ACTIVITY</sub><sub>NO</sub><sub>HISTORY启动标记的Activity是不会被放入栈中的。</sub>\n</li>\n<li>onSaveInstanceState -》 onStop\n</li>\n<li>StopInfo通知ActivityManagerService停止Activity的操作完成\n</li>\n</ol>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-6-3\" class=\"outline-4\">\n<h4 id=\"sec-1-6-3\">Activity Manager进程管理</h4>\n<div class=\"outline-text-4\" id=\"text-1-6-3\">\n<p>\n非隐藏进程：\n</p>\n<ul class=\"org-ul\">\n<li>有可见但非前台的activity\n</li>\n<li>有可见activity，该进程未被完全覆盖的Activity\n</li>\n<li>处于Pausing和Paused状态的activity\n</li>\n<li>处于STOPPING状态的Activity\n</li>\n<li>AMS.setProcessForeground\n</li>\n<li>HOME进程\n</li>\n<li>运行在内核空间中的进程\n</li>\n<li>当前线程的上一个线程\n</li>\n<li>备份线程\n</li>\n</ul>\n\n<p>\n/sys/module/lowmemorykiller/paramerters/adj 优先级数\n/sys/module/lowmemorykiller/paramerters/minfree 对应的内存阀值\n</p>\n\n<p>\nlowmem<sub>shrink</sub>:\n</p>\n<ul class=\"org-ul\">\n<li>OOM adj越大的进程越容易被杀\n</li>\n<li>相同OOM adj的进程，占用内存越大的越容易被杀\n</li>\n<li>未达到最小内存阈值的最大值时，不会杀\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n\nLast Updated 2017-10-11 三 21:05.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
